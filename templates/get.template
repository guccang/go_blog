<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GUCCANG/GET</title>
	<style>
		@import url("/css/editor.css");
	</style>
</head>
<body id="body" class="th_black">

    <!-- Markdown编辑器容器 -->
	<div class="top-fix-div">
		<a href="/link" style="font-size: 32px;">主页</a><br>
		<div class="separator"></div>
		<label id="title">{{.TITLE}}</label>
		<label id="ctime">{{.CTIME}}</label>
		<input id="tags" type="text" name="tags" value="{{.TAGS}}">
	</div>

	<div style="height:88px;" ></div>
	<button id="toggle-button" class="right-button" type="button" onclick="onEditor()">编辑</button>
	<div class="separator"></div>
	<div style="height:32px;" ></div>

	<div class="center-fix-div">
		<textarea id="editor-inner" class="hide th_black" name="content" wrap="hard">{{.CONTENT}}</textarea>
		<div id="md" class="md"></div>
	</div>

	<div class="bottom-fix-div">
		<button class="left-button" id="editor-button" type="button" onclick="submitFirst()">修改</button>

		{{if eq "private" .AUTHTYPE }}
		<input class="radio-left" type="radio" name="auth_type" value="private" checked>private</input>
		<input class="radio-left" type="radio" name="auth_type" value="public">public</input> 
		{{else}}
		<input class="radio-left" type="radio" name="auth_type" value="private">private</input>
		<input class="radio-left" type="radio" name="auth_type" value="public" checked>public</input> 
		{{end}}
		{{ if eq "aes" .ENCRYPT }}
		<input id="encrypt" type="password" name="encrypt" value=""></input> 
		<button id="comment-show" type="button" onclick="onDecrypt()">解密</button>
		{{end}}
	</div>

	{{ if eq "public" .AUTHTYPE }}
	<button id="comment-show" type="button" onclick="onShowComment()">显示评论</button>
	<div id="comments" class="hide">
			<label>所有评论:</label><br>
			<div class="separator"></div>
			{{range .COMMENTS}}
			<label>{{.MSG}} ({{.IDX}})</label><br>
			<label>commit by {{.OWNER}}({{.MAIL}}) at {{.CTIME}} </label><br>
			<div class="separator"></div>
			{{end}}
	</div>

	<div id="div-comment" class="hide">
			<label>用户名:</label>
			<input id="input-owner" type="text" value="" ><br>
			<label>邮箱:</label>
			<input id="input-mail" type="text" value="" ><br>
			<label>密码:</label>
			<input id="input-pwd" type="password" value="" ><br>
			<label>留言:</label>
			<input id="input-comment" type="text" value="" ><br>
			<button id="commit-comment" type="button" onclick="onCommitComment()">提交评论</button>
	</div>
	<div style="height:32px;"></div>
	{{end}}


	<div class="right-button">
	<button id="delete-button" type="button" onclick="onDelete()">删除</button>
	</div>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>
	<script src="/js/vim/vim.min.js"></script>
	<script src="/js/marked/marked.min.js"></script>
	<script src="/js/editor.js"></script>
	<script src="/js/utils.js"></script>
	<script>

	vim.open({
		//debug : true
	});

	function onDecrypt(){
		aesTest()
		var e = document.getElementById('editor-inner')
		var k = document.getElementById('encrypt').value
		var content =  e.innerHTML
		
		console.log("content=",content)
		console.log("encrypt=",k)
		var txt = aesDecrypt(content,k)
		console.log(txt)
		e.innerHTML = txt

		mdRender(txt)
		
	}

	function onShowComment(){
		var bnt = document.getElementById("comment-show")
		var comments = document.getElementById("comments")
		var div_comment =  document.getElementById("div-comment")
		var bntName = bnt.innerText
		if (bntName=="显示评论"){ 
			// 显示editor和md页面
			comments.setAttribute("class", ""); 
			div_comment.setAttribute("class","")
			bnt.innerText = "折叠评论"
		}else{
			// 隐藏editor显示md
			comments.setAttribute("class", "hide"); 
			div_comment.setAttribute("class","hide")
			bnt.innerText = "显示评论"
		}
	}

	function onDelete(){
		if (confirm("delete confirmation. Do you really want to delete this blog?")) {
			var title = document.getElementById("title").innerText;
			console.log("delete title=",title);
			// 使用XMLHttpRequest发送数据
			var xhr = new XMLHttpRequest();
			xhr.onreadystatechange = function() {
				if (xhr.readyState == 4 && xhr.status == 200) {
					// 处理服务器的响应
					console.log(xhr.responseText);
					alert(xhr.responseText)
				}
			};
			var formData = new FormData();
			formData.append('title', title);
			xhr.open('POST', '/delete', true);
			xhr.send(formData);
		} else {
			alert("Operation cancelled.");
		}	
	}

	function onCommitComment(){
		console.log("onCommitComment");
		var title = document.getElementById("title").innerText
		var comment = document.getElementById("input-comment").value;	
		var owner= document.getElementById("input-owner").value
		var pwd = document.getElementById("input-pwd").value
		pwd = CryptoJS.MD5(pwd).toString();

		var mail = document.getElementById("input-mail").value
		console.log("title=",title);
		console.log("owner=",owner);
		console.log("mail=",mail);
		console.log("comment=",comment);

		// 使用XMLHttpRequest发送数据
		var xhr = new XMLHttpRequest();
		xhr.onreadystatechange = function() {
			if (xhr.readyState == 4 && xhr.status == 200) {
				// 处理服务器的响应
				alert(xhr.responseText)
			}
		};

		var formData = new FormData();
		formData.append('title', title);
		formData.append('owner', owner);
		formData.append('pwd', pwd);
		formData.append('mail', mail);
		formData.append('comment', comment);
		xhr.open('POST', '/comment', true);
		xhr.send(formData);
	}

	function onEditor(){
		// PC端
		if (isPCDevice()){
			var e = document.getElementById('editor-inner')
			var d = document.getElementById('md')
			var ebnt = document.getElementById('editor-button')
			var bnt = document.getElementById('toggle-button')
			// 切换到编辑页面 
			var bntName = bnt.innerText
				if (bntName=="编辑"){ 
					// 显示editor和md页面
					d.setAttribute("class", "mdEditor"); 
					e.setAttribute("class", "editor th_black");
					ebnt.setAttribute("class","left-button");
					bnt.innerText = "预览"
					// 更新编辑框大小
				    e.style.height = (d.clientHeight) + 'px';
				}else{
					// 隐藏editor显示md
					d.setAttribute("class", "md"); 
					e.setAttribute("class", "hide th_black");
					//ebnt.setAttribute("class","hide");
					bnt.innerText = "编辑"
				}
		}else{
			// 移动端
			var e = document.getElementById('editor-inner')
			var d = document.getElementById('md')
			var ebnt = document.getElementById('editor-button')
			var bnt = document.getElementById('toggle-button')
				// 切换到编辑页面 
			var bntName = bnt.innerText
				if (bntName=="编辑"){ 
					// 显示editor和md页面
					d.setAttribute("class", "hide"); 
					e.setAttribute("class", "editorfullscreen th_black");
					ebnt.setAttribute("class","left-button");
					bnt.innerText = "预览"
				}else{
					// 隐藏editor显示md
					d.setAttribute("class", "md"); 
					e.setAttribute("class", "hide th_black");
					ebnt.setAttribute("class","hide");
					bnt.innerText = "编辑"
				}
			
		}
	}

	function submitFirst(){
        if (document.getElementById("encrypt") != null) {
			if (confirm("First confirmation. Do you really want to proceed?")) {
				submitContent();
			} else {
				alert("Operation cancelled.");
			}	
		}else{
				submitContent();
		}
	}

	function submitContent() {
		var content = document.getElementById('editor-inner').value;
		var title = document.getElementById("title").innerText;
		var tags = document.getElementById("tags").value;
		var key = "" 
        if (document.getElementById("encrypt") != null) {
			key = document.getElementById("encrypt").value
		}

		var auth_type = document.querySelector('input[name="auth_type"]:checked').value;
		console.log("auth_type=",auth_type);

		// 使用XMLHttpRequest发送数据
		var xhr = new XMLHttpRequest();
		xhr.onreadystatechange = function() {
			if (xhr.readyState == 4 && xhr.status == 200) {
				// 处理服务器的响应
				console.log(xhr.responseText);
				alert(xhr.responseText)
			}
		};


		if (key.length != 0) {
			var en = aesEncrypt(content, key)
			content = en
			key = 'use_aes_cbc'
		}

		var formData = new FormData();
		formData.append('title', title);
		formData.append('content', content);
		formData.append('auth_type', auth_type);
		formData.append('tags', tags);
		formData.append('encrypt', key);
		xhr.open('POST', '/modify', true);
		xhr.send(formData);
	}

      // 获取textarea元素
	   var textarea = document.getElementById('editor-inner');
        // 监听输入事件
        textarea.addEventListener('input', function () {
            // 重置textarea的高度以适应内容
            this.style.height = 'auto';
			var d = document.getElementById('md')
            //this.style.height = (this.scrollHeight) + 'px';
            this.style.height = (d.clientHeight) + 'px';
		
			// marked 重新渲染
			// PC Device
			if (isPCDevice()){
				mdRender(textarea.value)	
			}
	})

		window.onload = function(){
			// md渲染
			mdRender(textarea.value)
			// 时间-black
			checkTime()
		}

	</script>

</body>
</html>

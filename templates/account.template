<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ë¥¶Êà∑‰ø°ÊÅØÈÖçÁΩÆ - GUCCANG</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/skill.css">
    <style>
        /* Ë¥¶Êà∑È°µÈù¢ÁâπÂÆöÊ†∑Âºè */
        .account-container {
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
        }

        .account-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            color: white;
            text-align: center;
        }

        .account-avatar {
            width: 80px;
            height: 80px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 36px;
            font-weight: bold;
            margin: 0 auto 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .account-avatar:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.05);
        }

        .account-name {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .account-username {
            font-size: 16px;
            opacity: 0.8;
        }

        .account-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }

        .stat-card {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            border: 1px solid var(--border-color);
        }

        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary-color);
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 14px;
            color: var(--text-secondary);
        }

        .info-section {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            border: 1px solid var(--border-color);
        }

        .section-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .section-title {
            font-size: 20px;
            font-weight: bold;
            color: var(--text-color);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .edit-toggle-btn {
            background: #28a745;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 8px 16px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .edit-toggle-btn:hover {
            background: #218838;
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .info-item {
            margin-bottom: 15px;
        }

        .info-label {
            font-size: 14px;
            color: var(--text-secondary);
            margin-bottom: 5px;
            font-weight: 500;
        }

        .info-value {
            font-size: 16px;
            color: var(--text-color);
            padding: 8px 0;
            border-bottom: 1px solid transparent;
        }

        .info-input {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            background: var(--bg-color);
            color: var(--text-color);
            font-size: 14px;
            display: none;
        }

        .info-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .form-actions {
            margin-top: 20px;
            text-align: right;
            display: none;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            margin-left: 10px;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: #007bff;
            color: white;
            border: 1px solid #007bff;
        }

        .btn-primary:hover {
            background: #0056b3;
            border-color: #0056b3;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
            border: 1px solid #6c757d;
        }

        .btn-secondary:hover {
            background: #545b62;
            border-color: #545b62;
        }

        .hobbies-container {
            grid-column: 1 / -1;
        }

        .hobbies-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }

        .hobby-tag {
            background: var(--accent-color);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .bmi-indicator {
            padding: 6px 12px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
            display: inline-block;
        }

        .bmi-normal { background: #d4edda; color: #155724; }
        .bmi-underweight { background: #cce5ff; color: #004085; }
        .bmi-overweight { background: #fff3cd; color: #856404; }
        .bmi-obese { background: #f8d7da; color: #721c24; }

        /* Â§¥ÂÉèÁºñËæëÊ®°ÊÄÅÊ°Ü */
        .avatar-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .avatar-modal-content {
            background-color: var(--card-bg);
            margin: 15% auto;
            padding: 20px;
            border-radius: 12px;
            width: 300px;
            text-align: center;
        }

        .avatar-input {
            width: 80px;
            height: 80px;
            font-size: 36px;
            text-align: center;
            border: 2px solid var(--primary-color);
            border-radius: 50%;
            margin: 20px auto;
            display: block;
        }

        /* ÁßªÂä®Á´ØÈÄÇÈÖç */
        @media (max-width: 768px) {
            .account-container {
                padding: 10px;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="top-sidebar-cotainer">
        <div class="top-sidebar">
            <div class="search-toggle-container">
                <h1 class="page-title" style="margin:0;color:var(--text-color);font-size:24px;">üë§ Ë¥¶Êà∑‰ø°ÊÅØ</h1>
            </div>
        </div>
    </div>

    <div class="account-container">
        <!-- Ë¥¶Êà∑Â§¥ÈÉ® -->
        <div class="account-header">
            <div class="account-avatar" onclick="openAvatarModal()">{{.AccountInfo.Avatar}}</div>
            <div class="account-name">{{if .AccountInfo.Name}}{{.AccountInfo.Name}}{{else}}{{.UserAccount}}{{end}}</div>
            <div class="account-username">@{{.UserAccount}}</div>
        </div>

        <!-- ÁªüËÆ°Âç°Áâá -->
        <div class="account-stats">
            {{if and .AccountInfo.Height .AccountInfo.Weight}}
            <div class="stat-card">
                <div class="stat-value">{{printf "%.1f" .BMI}}</div>
                <div class="stat-label">BMIÊåáÊï∞</div>
                <div class="bmi-indicator {{if eq .BMIStatus "Ê≠£Â∏∏"}}bmi-normal{{else if eq .BMIStatus "ÂÅèÁò¶"}}bmi-underweight{{else if eq .BMIStatus "ÂÅèËÉñ"}}bmi-overweight{{else}}bmi-obese{{end}}">
                    {{.BMIStatus}}
                </div>
            </div>
            {{end}}
            {{if .Age}}
            <div class="stat-card">
                <div class="stat-value">{{.Age}}</div>
                <div class="stat-label">Âπ¥ÈæÑ</div>
            </div>
            {{end}}
            {{if .AccountInfo.Height}}
            <div class="stat-card">
                <div class="stat-value">{{printf "%.1f" .AccountInfo.Height}}</div>
                <div class="stat-label">Ë∫´È´ò (cm)</div>
            </div>
            {{end}}
            {{if .AccountInfo.Weight}}
            <div class="stat-card">
                <div class="stat-value">{{printf "%.1f" .AccountInfo.Weight}}</div>
                <div class="stat-label">‰ΩìÈáç (kg)</div>
            </div>
            {{end}}
        </div>

        <!-- Âü∫Êú¨‰ø°ÊÅØ -->
        <div class="info-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-user"></i>
                    Âü∫Êú¨‰ø°ÊÅØ
                </h2>
                <button class="edit-toggle-btn" onclick="toggleEdit('basic')">ÁºñËæë</button>
            </div>
            
            <form id="basicForm" class="info-grid">
                <div class="info-item">
                    <div class="info-label">ÂßìÂêç</div>
                    <div class="info-value" id="name-display">{{if .AccountInfo.Name}}{{.AccountInfo.Name}}{{else}}Êú™ËÆæÁΩÆ{{end}}</div>
                    <input type="text" class="info-input" id="name-input" name="name" value="{{.AccountInfo.Name}}" placeholder="ËØ∑ËæìÂÖ•ÂßìÂêç">
                </div>
                
                <div class="info-item">
                    <div class="info-label">Âπ¥ÈæÑ</div>
                    <div class="info-value" id="age-display">{{if .Age}}{{.Age}}Â≤Å{{else}}Êú™ËÆæÁΩÆ{{end}}</div>
                    <input type="number" class="info-input" id="age-input" name="age" value="{{.AccountInfo.Age}}" placeholder="ËØ∑ËæìÂÖ•Âπ¥ÈæÑ" min="0" max="150">
                </div>

                <div class="info-item">
                    <div class="info-label">ÁîüÊó•</div>
                    <div class="info-value" id="birthday-display">{{if .AccountInfo.Birthday}}{{.AccountInfo.Birthday}}{{else}}Êú™ËÆæÁΩÆ{{end}}</div>
                    <input type="date" class="info-input" id="birthday-input" name="birthday" value="{{.AccountInfo.Birthday}}">
                </div>

                <div class="info-item">
                    <div class="info-label">Ë∫´È´ò (cm)</div>
                    <div class="info-value" id="height-display">{{if .AccountInfo.Height}}{{printf "%.1f" .AccountInfo.Height}} cm{{else}}Êú™ËÆæÁΩÆ{{end}}</div>
                    <input type="number" class="info-input" id="height-input" name="height" value="{{if .AccountInfo.Height}}{{printf "%.1f" .AccountInfo.Height}}{{end}}" placeholder="ËØ∑ËæìÂÖ•Ë∫´È´ò" step="0.1" min="0" max="300">
                </div>

                <div class="info-item">
                    <div class="info-label">‰ΩìÈáç (kg)</div>
                    <div class="info-value" id="weight-display">{{if .AccountInfo.Weight}}{{printf "%.1f" .AccountInfo.Weight}} kg{{else}}Êú™ËÆæÁΩÆ{{end}}</div>
                    <input type="number" class="info-input" id="weight-input" name="weight" value="{{if .AccountInfo.Weight}}{{printf "%.1f" .AccountInfo.Weight}}{{end}}" placeholder="ËØ∑ËæìÂÖ•‰ΩìÈáç" step="0.1" min="0" max="1000">
                </div>

                <div class="info-item hobbies-container">
                    <div class="info-label">Áà±Â•Ω</div>
                    <div class="info-value" id="hobbies-display">
                        {{if .AccountInfo.Hobbies}}
                            <div class="hobbies-tags">
                                {{range .AccountInfo.Hobbies}}
                                    <span class="hobby-tag">{{.}}</span>
                                {{end}}
                            </div>
                        {{else}}
                            Êú™ËÆæÁΩÆ
                        {{end}}
                    </div>
                    <input type="text" class="info-input" id="hobbies-input" name="hobbies" value="{{.HobbiesStr}}" placeholder="ËØ∑ËæìÂÖ•Áà±Â•ΩÔºåÁî®ÈÄóÂè∑ÂàÜÈöî">
                </div>

                <div class="form-actions" id="basic-actions">
                    <button type="button" class="btn btn-secondary" onclick="cancelEdit('basic')">ÂèñÊ∂à</button>
                    <button type="button" class="btn btn-primary" onclick="saveBasicInfo()">‰øùÂ≠ò</button>
                </div>
            </form>
        </div>

        <!-- ËÅîÁ≥ª‰ø°ÊÅØ -->
        <div class="info-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-address-book"></i>
                    ËÅîÁ≥ª‰ø°ÊÅØ
                </h2>
                <button class="edit-toggle-btn" onclick="toggleEdit('contact')">ÁºñËæë</button>
            </div>
            
            <form id="contactForm" class="info-grid">
                <div class="info-item">
                    <div class="info-label">ÁîµËØù</div>
                    <div class="info-value" id="phone-display">{{if .AccountInfo.Phone}}{{.AccountInfo.Phone}}{{else}}Êú™ËÆæÁΩÆ{{end}}</div>
                    <input type="tel" class="info-input" id="phone-input" name="phone" value="{{.AccountInfo.Phone}}" placeholder="ËØ∑ËæìÂÖ•ÁîµËØùÂè∑Á†Å">
                </div>
                
                <div class="info-item">
                    <div class="info-label">ÈÇÆÁÆ±</div>
                    <div class="info-value" id="email-display">{{if .AccountInfo.Email}}{{.AccountInfo.Email}}{{else}}Êú™ËÆæÁΩÆ{{end}}</div>
                    <input type="email" class="info-input" id="email-input" name="email" value="{{.AccountInfo.Email}}" placeholder="ËØ∑ËæìÂÖ•ÈÇÆÁÆ±Âú∞ÂùÄ">
                </div>

                <div class="info-item">
                    <div class="info-label">ÊâÄÂú®Âú∞</div>
                    <div class="info-value" id="location-display">{{if .AccountInfo.Location}}{{.AccountInfo.Location}}{{else}}Êú™ËÆæÁΩÆ{{end}}</div>
                    <input type="text" class="info-input" id="location-input" name="location" value="{{.AccountInfo.Location}}" placeholder="ËØ∑ËæìÂÖ•ÊâÄÂú®Âú∞">
                </div>

                <div class="info-item">
                    <div class="info-label">‰∏™‰∫∫ÁΩëÁ´ô</div>
                    <div class="info-value" id="website-display">
                        {{if .AccountInfo.Website}}
                            <a href="{{.AccountInfo.Website}}" target="_blank">{{.AccountInfo.Website}}</a>
                        {{else}}
                            Êú™ËÆæÁΩÆ
                        {{end}}
                    </div>
                    <input type="url" class="info-input" id="website-input" name="website" value="{{.AccountInfo.Website}}" placeholder="ËØ∑ËæìÂÖ•‰∏™‰∫∫ÁΩëÁ´ô">
                </div>

                <div class="info-item" style="grid-column: 1 / -1;">
                    <div class="info-label">‰∏™‰∫∫ÁÆÄ‰ªã</div>
                    <div class="info-value" id="bio-display">{{if .AccountInfo.Bio}}{{.AccountInfo.Bio}}{{else}}Êú™ËÆæÁΩÆ{{end}}</div>
                    <textarea class="info-input" id="bio-input" name="bio" rows="3" placeholder="ËØ∑ËæìÂÖ•‰∏™‰∫∫ÁÆÄ‰ªã">{{.AccountInfo.Bio}}</textarea>
                </div>

                <div class="form-actions" id="contact-actions">
                    <button type="button" class="btn btn-secondary" onclick="cancelEdit('contact')">ÂèñÊ∂à</button>
                    <button type="button" class="btn btn-primary" onclick="saveContactInfo()">‰øùÂ≠ò</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Â§¥ÂÉèÁºñËæëÊ®°ÊÄÅÊ°Ü -->
    <div id="avatarModal" class="avatar-modal">
        <div class="avatar-modal-content">
            <h3>‰øÆÊîπÂ§¥ÂÉè</h3>
            <p>ËØ∑ËæìÂÖ•‰∏Ä‰∏™Â≠óÁ¨¶‰Ωú‰∏∫Â§¥ÂÉè</p>
            <input type="text" id="avatarInput" class="avatar-input" maxlength="1" placeholder="G">
            <div style="margin-top: 20px;">
                <button class="btn btn-secondary" onclick="closeAvatarModal()">ÂèñÊ∂à</button>
                <button class="btn btn-primary" onclick="saveAvatar()">‰øùÂ≠ò</button>
            </div>
        </div>
    </div>

    <!-- ToastÂÆπÂô® -->
    <div id="toast-container" class="toast-container"></div>

    <!-- ÂàõÂª∫ÊåâÈíÆ -->
    <a href="/main" class="create-btn" title="ËøîÂõû‰∏ªÈ°µ">üè†</a>

    <!-- Êô∫ËÉΩÂä©ÊâãÊÇ¨ÊµÆÂõæÊ†á -->
    <a href="/assistant" class="assistant-floating-btn" title="Êô∫ËÉΩÂä©Êâã">
        <i class="fas fa-robot"></i>
    </a>

    <script>
        // ÂΩìÂâçÁºñËæëÁä∂ÊÄÅ
        let editMode = {};

        // ÂàáÊç¢ÁºñËæëÊ®°Âºè
        function toggleEdit(section) {
            const isEditing = editMode[section];
            
            if (isEditing) {
                cancelEdit(section);
            } else {
                enterEditMode(section);
            }
        }

        // ËøõÂÖ•ÁºñËæëÊ®°Âºè
        function enterEditMode(section) {
            editMode[section] = true;
            
            // ÈöêËóèÊòæÁ§∫ÂÖÉÁ¥†ÔºåÊòæÁ§∫ËæìÂÖ•ÂÖÉÁ¥†
            const form = document.getElementById(section + 'Form');
            const displays = form.querySelectorAll('.info-value');
            const inputs = form.querySelectorAll('.info-input');
            const actions = document.getElementById(section + '-actions');
            const editBtn = form.closest('.info-section').querySelector('.edit-toggle-btn');
            
            displays.forEach(display => display.style.display = 'none');
            inputs.forEach(input => input.style.display = 'block');
            actions.style.display = 'block';
            editBtn.textContent = 'ÂèñÊ∂àÁºñËæë';
        }

        // ÂèñÊ∂àÁºñËæë
        function cancelEdit(section) {
            editMode[section] = false;
            
            // ÊòæÁ§∫ÊòæÁ§∫ÂÖÉÁ¥†ÔºåÈöêËóèËæìÂÖ•ÂÖÉÁ¥†
            const form = document.getElementById(section + 'Form');
            const displays = form.querySelectorAll('.info-value');
            const inputs = form.querySelectorAll('.info-input');
            const actions = document.getElementById(section + '-actions');
            const editBtn = form.closest('.info-section').querySelector('.edit-toggle-btn');
            
            displays.forEach(display => display.style.display = 'block');
            inputs.forEach(input => input.style.display = 'none');
            actions.style.display = 'none';
            editBtn.textContent = 'ÁºñËæë';
        }

        // ‰øùÂ≠òÂü∫Êú¨‰ø°ÊÅØ
        function saveBasicInfo() {
            const form = document.getElementById('basicForm');
            const formData = new FormData(form);
            
            fetch('/api/account', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Âü∫Êú¨‰ø°ÊÅØ‰øùÂ≠òÊàêÂäü', 'success');
                    updateDisplayValues('basic', formData);
                    cancelEdit('basic');
                    
                    // Êõ¥Êñ∞ÁªüËÆ°Âç°Áâá
                    if (data.bmi > 0) {
                        updateStatsCards(data);
                    }
                } else {
                    showToast(data.message || '‰øùÂ≠òÂ§±Ë¥•', 'error');
                    if (data.errors) {
                        data.errors.forEach(error => showToast(error, 'error'));
                    }
                }
            })
            .catch(error => {
                showToast('ÁΩëÁªúÈîôËØØ: ' + error.message, 'error');
            });
        }

        // ‰øùÂ≠òËÅîÁ≥ª‰ø°ÊÅØ
        function saveContactInfo() {
            const form = document.getElementById('contactForm');
            const formData = new FormData(form);
            
            fetch('/api/account', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('ËÅîÁ≥ª‰ø°ÊÅØ‰øùÂ≠òÊàêÂäü', 'success');
                    updateDisplayValues('contact', formData);
                    cancelEdit('contact');
                } else {
                    showToast(data.message || '‰øùÂ≠òÂ§±Ë¥•', 'error');
                    if (data.errors) {
                        data.errors.forEach(error => showToast(error, 'error'));
                    }
                }
            })
            .catch(error => {
                showToast('ÁΩëÁªúÈîôËØØ: ' + error.message, 'error');
            });
        }

        // Êõ¥Êñ∞ÊòæÁ§∫ÂÄº
        function updateDisplayValues(section, formData) {
            const form = document.getElementById(section + 'Form');
            
            for (let [key, value] of formData.entries()) {
                const displayElement = document.getElementById(key + '-display');
                if (displayElement) {
                    if (value) {
                        if (key === 'height' || key === 'weight') {
                            const unit = key === 'height' ? ' cm' : ' kg';
                            displayElement.textContent = value + unit;
                        } else if (key === 'age') {
                            displayElement.textContent = value + 'Â≤Å';
                        } else if (key === 'hobbies') {
                            updateHobbiesDisplay(value);
                        } else if (key === 'website' && value) {
                            displayElement.innerHTML = `<a href="${value}" target="_blank">${value}</a>`;
                        } else {
                            displayElement.textContent = value;
                        }
                    } else {
                        displayElement.textContent = 'Êú™ËÆæÁΩÆ';
                    }
                }
            }
        }

        // Êõ¥Êñ∞Áà±Â•ΩÊòæÁ§∫
        function updateHobbiesDisplay(hobbiesStr) {
            const displayElement = document.getElementById('hobbies-display');
            if (hobbiesStr) {
                const hobbies = hobbiesStr.split(',').map(h => h.trim()).filter(h => h);
                const tagsHtml = hobbies.map(hobby => `<span class="hobby-tag">${hobby}</span>`).join('');
                displayElement.innerHTML = `<div class="hobbies-tags">${tagsHtml}</div>`;
            } else {
                displayElement.textContent = 'Êú™ËÆæÁΩÆ';
            }
        }

        // Êõ¥Êñ∞ÁªüËÆ°Âç°Áâá
        function updateStatsCards(data) {
            // ËøôÈáåÂèØ‰ª•Êõ¥Êñ∞BMIÂíåÂÖ∂‰ªñÁªüËÆ°‰ø°ÊÅØÁöÑÊòæÁ§∫
            // ‰∏∫‰∫ÜÁÆÄÂåñÔºåÊàë‰ª¨ÈáçÊñ∞Âä†ËΩΩÈ°µÈù¢
            setTimeout(() => {
                location.reload();
            }, 1000);
        }

        // Â§¥ÂÉèÁÆ°ÁêÜ
        function openAvatarModal() {
            const modal = document.getElementById('avatarModal');
            const input = document.getElementById('avatarInput');
            input.value = '{{.AccountInfo.Avatar}}';
            modal.style.display = 'block';
        }

        function closeAvatarModal() {
            document.getElementById('avatarModal').style.display = 'none';
        }

        function saveAvatar() {
            const avatar = document.getElementById('avatarInput').value.trim();
            if (!avatar) {
                showToast('ËØ∑ËæìÂÖ•Â§¥ÂÉèÂ≠óÁ¨¶', 'error');
                return;
            }

            const formData = new FormData();
            formData.append('avatar', avatar);

            fetch('/api/account/avatar', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Â§¥ÂÉèÊõ¥Êñ∞ÊàêÂäü', 'success');
                    document.querySelector('.account-avatar').textContent = avatar;
                    closeAvatarModal();
                } else {
                    showToast(data.message || 'Â§¥ÂÉèÊõ¥Êñ∞Â§±Ë¥•', 'error');
                }
            })
            .catch(error => {
                showToast('ÁΩëÁªúÈîôËØØ: ' + error.message, 'error');
            });
        }

        // ÊòæÁ§∫ToastÊ∂àÊÅØ
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.textContent = message;
            
            const container = document.getElementById('toast-container');
            if (!container) {
                const newContainer = document.createElement('div');
                newContainer.id = 'toast-container';
                newContainer.className = 'toast-container';
                newContainer.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 1000;
                `;
                document.body.appendChild(newContainer);
            }
            
            document.getElementById('toast-container').appendChild(toast);
            
            // Ê∑ªÂä†ToastÊ†∑Âºè
            toast.style.cssText = `
                background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#007bff'};
                color: white;
                padding: 12px 20px;
                border-radius: 6px;
                margin-bottom: 10px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.2);
                animation: slideIn 0.3s ease;
            `;
            
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        // Ê∑ªÂä†ÈîÆÁõòÂø´Êç∑ÈîÆÊîØÊåÅ
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeAvatarModal();
            }
        });

        // È°µÈù¢Âä†ËΩΩÂÆåÊàê
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Ë¥¶Êà∑‰ø°ÊÅØÈ°µÈù¢Âä†ËΩΩÂÆåÊàê');
        });
    </script>
</body>
</html>
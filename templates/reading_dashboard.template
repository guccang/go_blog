<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìä ÈòÖËØª‰ª™Ë°®Êùø - GUCCANG</title>
    <link rel="stylesheet" href="/css/reading.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .dashboard-header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .dashboard-card {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 12px var(--shadow-color);
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .card-title {
            font-size: 18px;
            font-weight: bold;
            color: var(--text-color);
        }
        
        .card-action {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }
        
        .stat-card {
            background: var(--lighter-bg);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary-color);
            display: block;
        }
        
        .stat-label {
            font-size: 12px;
            color: var(--text-muted);
            margin-top: 5px;
        }
        
        .progress-ring {
            width: 120px;
            height: 120px;
            margin: 0 auto 15px;
        }
        
        .progress-ring-circle {
            stroke: var(--primary-color);
            stroke-width: 8;
            fill: transparent;
            stroke-dasharray: 283;
            stroke-dashoffset: 283;
            transition: stroke-dashoffset 0.5s ease;
        }
        
        .progress-ring-bg {
            stroke: var(--border-color);
            stroke-width: 8;
            fill: transparent;
        }
        
        .goals-list {
            max-height: 300px;
            overflow-y: auto;
        }
        
        .goal-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid var(--border-color);
        }
        
        .goal-info {
            flex: 1;
        }
        
        .goal-title {
            font-weight: bold;
            color: var(--text-color);
            margin-bottom: 5px;
        }
        
        .goal-progress {
            font-size: 12px;
            color: var(--text-muted);
        }
        
        .goal-status {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: bold;
        }
        
        .status-active {
            background: var(--warning-color);
            color: var(--bg-color);
        }
        
        .status-completed {
            background: var(--success-color);
            color: white;
        }
        
        .plans-list {
            max-height: 300px;
            overflow-y: auto;
        }
        
        .plan-item {
            background: var(--lighter-bg);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
        }
        
        .plan-title {
            font-weight: bold;
            color: var(--text-color);
            margin-bottom: 5px;
        }
        
        .plan-description {
            font-size: 14px;
            color: var(--text-muted);
            margin-bottom: 10px;
        }
        
        .plan-progress {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .plan-progress-bar {
            flex: 1;
            height: 6px;
            background: var(--border-color);
            border-radius: 3px;
            overflow: hidden;
        }
        
        .plan-progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            transition: width 0.3s ease;
        }
        
        .recommendations-list {
            max-height: 300px;
            overflow-y: auto;
        }
        
        .recommendation-item {
            display: flex;
            gap: 15px;
            padding: 15px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .recommendation-cover {
            width: 60px;
            height: 80px;
            background: var(--lighter-bg);
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            flex-shrink: 0;
        }
        
        .recommendation-info {
            flex: 1;
        }
        
        .recommendation-title {
            font-weight: bold;
            color: var(--text-color);
            margin-bottom: 5px;
        }
        
        .recommendation-author {
            font-size: 14px;
            color: var(--text-muted);
            margin-bottom: 5px;
        }
        
        .recommendation-reason {
            font-size: 12px;
            color: var(--text-muted);
            font-style: italic;
        }
        
        .recommendation-score {
            color: var(--primary-color);
            font-weight: bold;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
            margin-top: 20px;
        }
        
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
        }
        
        .modal.hide {
            display: none;
        }
        
        .modal-content {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-label {
            display: block;
            margin-bottom: 8px;
            color: var(--text-color);
            font-weight: bold;
        }
        
        .form-input {
            width: 100%;
            padding: 12px;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            background: var(--bg-color);
            color: var(--text-color);
            font-size: 14px;
        }
        
        .form-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }
        
        .form-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 20px;
        }
        
        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body id="body" class="th_black">
    <div class="dashboard-container">
        <div class="dashboard-header">
            <h1>üìä ÈòÖËØª‰ª™Ë°®Êùø</h1>
            <p>ÂÖ®Èù¢ÊéåÊéßÊÇ®ÁöÑÈòÖËØªËøõÂ∫¶‰∏éÊàêÈïø</p>
        </div>
        
        <!-- ÁªüËÆ°Ê¶ÇËßà -->
        <div class="dashboard-card">
            <div class="card-header">
                <h2 class="card-title">üìà ÁªüËÆ°Ê¶ÇËßà</h2>
                <button class="card-action" onclick="refreshStats()">Âà∑Êñ∞</button>
            </div>
            <div class="stats-grid" id="stats-grid">
                <div class="stat-card">
                    <span class="stat-value" id="total-books">0</span>
                    <div class="stat-label">ÊÄª‰π¶Á±ç</div>
                </div>
                <div class="stat-card">
                    <span class="stat-value" id="reading-books">0</span>
                    <div class="stat-label">ÈòÖËØª‰∏≠</div>
                </div>
                <div class="stat-card">
                    <span class="stat-value" id="finished-books">0</span>
                    <div class="stat-label">Â∑≤ÂÆåÊàê</div>
                </div>
                <div class="stat-card">
                    <span class="stat-value" id="total-pages">0</span>
                    <div class="stat-label">ÊÄªÈ°µÊï∞</div>
                </div>
                <div class="stat-card">
                    <span class="stat-value" id="reading-time">0</span>
                    <div class="stat-label">ÈòÖËØªÊó∂Èó¥(ÂàÜÈíü)</div>
                </div>
                <div class="stat-card">
                    <span class="stat-value" id="average-rating">0.0</span>
                    <div class="stat-label">Âπ≥ÂùáËØÑÂàÜ</div>
                </div>
            </div>
        </div>
        
        <div class="dashboard-grid">
            <!-- ÈòÖËØªÁõÆÊ†á -->
            <div class="dashboard-card">
                <div class="card-header">
                    <h2 class="card-title">üéØ ÈòÖËØªÁõÆÊ†á</h2>
                    <button class="card-action" onclick="showAddGoalModal()">Êñ∞Â¢ûÁõÆÊ†á</button>
                </div>
                <div class="goals-list" id="goals-list">
                    <div class="goal-item">
                        <div class="goal-info">
                            <div class="goal-title">2024Âπ¥Â∫¶ÈòÖËØªÁõÆÊ†á</div>
                            <div class="goal-progress">ËøõÂ∫¶: 15/30 Êú¨‰π¶</div>
                        </div>
                        <div class="goal-status status-active">ËøõË°å‰∏≠</div>
                    </div>
                </div>
            </div>
            
            <!-- ÈòÖËØªËÆ°Âàí -->
            <div class="dashboard-card">
                <div class="card-header">
                    <h2 class="card-title">üìã ÈòÖËØªËÆ°Âàí</h2>
                    <button class="card-action" onclick="showAddPlanModal()">Êñ∞Â¢ûËÆ°Âàí</button>
                </div>
                <div class="plans-list" id="plans-list">
                    <div class="plan-item">
                        <div class="plan-title">ÊäÄÊúØÊàêÈïøËÆ°Âàí</div>
                        <div class="plan-description">‰∏ìÊ≥®‰∫éÊäÄÊúØÁ±ª‰π¶Á±çÁöÑÁ≥ªÁªüÊÄßÈòÖËØª</div>
                        <div class="plan-progress">
                            <div class="plan-progress-bar">
                                <div class="plan-progress-fill" style="width: 60%"></div>
                            </div>
                            <span>60%</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Êé®Ëçê‰π¶Á±ç -->
            <div class="dashboard-card">
                <div class="card-header">
                    <h2 class="card-title">üí° Êé®Ëçê‰π¶Á±ç</h2>
                    <button class="card-action" onclick="refreshRecommendations()">Âà∑Êñ∞Êé®Ëçê</button>
                </div>
                <div class="recommendations-list" id="recommendations-list">
                    <div class="recommendation-item">
                        <div class="recommendation-cover">üìö</div>
                        <div class="recommendation-info">
                            <div class="recommendation-title">Êé®Ëçê‰π¶Á±çÊ†áÈ¢ò</div>
                            <div class="recommendation-author">‰ΩúËÄÖÂêç</div>
                            <div class="recommendation-reason">Âü∫‰∫éÊÇ®ÁöÑÈòÖËØªÂÅèÂ•ΩÊé®Ëçê</div>
                        </div>
                        <div class="recommendation-score">8.5ÂàÜ</div>
                    </div>
                </div>
            </div>
            
            <!-- ÈòÖËØªË∂ãÂäø -->
            <div class="dashboard-card">
                <div class="card-header">
                    <h2 class="card-title">üìä ÈòÖËØªË∂ãÂäø</h2>
                    <button class="card-action" onclick="switchChartType()">ÂàáÊç¢ÂõæË°®</button>
                </div>
                <div class="chart-container">
                    <canvas id="reading-chart"></canvas>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Ê∑ªÂä†ÁõÆÊ†áÊ®°ÊÄÅÊ°Ü -->
    <div id="add-goal-modal" class="modal hide">
        <div class="modal-content">
            <h3>üéØ Ê∑ªÂä†ÈòÖËØªÁõÆÊ†á</h3>
            <form id="add-goal-form">
                <div class="form-group">
                    <label class="form-label">ÁõÆÊ†áÂπ¥‰ªΩ</label>
                    <input type="number" class="form-input" id="goal-year" min="2020" max="2030" value="2024">
                </div>
                <div class="form-group">
                    <label class="form-label">ÁõÆÊ†áÊúà‰ªΩÔºàÂèØÈÄâÔºâ</label>
                    <input type="number" class="form-input" id="goal-month" min="1" max="12" placeholder="ÁïôÁ©∫Ë°®Á§∫Âπ¥Â∫¶ÁõÆÊ†á">
                </div>
                <div class="form-group">
                    <label class="form-label">ÁõÆÊ†áÁ±ªÂûã</label>
                    <select class="form-input" id="goal-type">
                        <option value="books">‰π¶Á±çÊï∞Èáè</option>
                        <option value="pages">È°µÊï∞</option>
                        <option value="time">ÈòÖËØªÊó∂Èó¥(ÂàÜÈíü)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">ÁõÆÊ†áÊï∞ÂÄº</label>
                    <input type="number" class="form-input" id="goal-value" min="1" required>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-secondary" onclick="hideAddGoalModal()">ÂèñÊ∂à</button>
                    <button type="submit" class="btn-primary">Ê∑ªÂä†ÁõÆÊ†á</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Ê∑ªÂä†ËÆ°ÂàíÊ®°ÊÄÅÊ°Ü -->
    <div id="add-plan-modal" class="modal hide">
        <div class="modal-content">
            <h3>üìã Ê∑ªÂä†ÈòÖËØªËÆ°Âàí</h3>
            <form id="add-plan-form">
                <div class="form-group">
                    <label class="form-label">ËÆ°ÂàíÂêçÁß∞</label>
                    <input type="text" class="form-input" id="plan-title" required>
                </div>
                <div class="form-group">
                    <label class="form-label">ËÆ°ÂàíÊèèËø∞</label>
                    <textarea class="form-input" id="plan-description" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">ÂºÄÂßãÊó•Êúü</label>
                    <input type="date" class="form-input" id="plan-start-date" required>
                </div>
                <div class="form-group">
                    <label class="form-label">ÁªìÊùüÊó•Êúü</label>
                    <input type="date" class="form-input" id="plan-end-date" required>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-secondary" onclick="hideAddPlanModal()">ÂèñÊ∂à</button>
                    <button type="submit" class="btn-primary">Ê∑ªÂä†ËÆ°Âàí</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        // ÂÖ®Â±ÄÂèòÈáè
        let readingChart = null;
        let chartType = 'monthly';
        
        // È°µÈù¢ÂàùÂßãÂåñ
        document.addEventListener('DOMContentLoaded', function() {
            loadDashboardData();
            initChart();
        });
        
        // Âä†ËΩΩ‰ª™Ë°®ÊùøÊï∞ÊçÆ
        async function loadDashboardData() {
            try {
                const [stats, goals, plans, recommendations] = await Promise.all([
                    fetch('/api/advanced-reading-statistics').then(r => r.json()),
                    fetch('/api/reading-goals?year=2024').then(r => r.json()),
                    fetch('/api/reading-plans').then(r => r.json()),
                    fetch('/api/book-recommendations?book_id=sample').then(r => r.json()).catch(() => ({ recommendations: [] }))
                ]);
                
                updateStatsDisplay(stats);
                updateGoalsDisplay(goals.goals || []);
                updatePlansDisplay(plans.plans || []);
                updateRecommendationsDisplay(recommendations.recommendations || []);
                
            } catch (error) {
                console.error('Âä†ËΩΩ‰ª™Ë°®ÊùøÊï∞ÊçÆÂ§±Ë¥•:', error);
            }
        }
        
        // Êõ¥Êñ∞ÁªüËÆ°ÊòæÁ§∫
        function updateStatsDisplay(stats) {
            document.getElementById('total-books').textContent = stats.total_books || 0;
            document.getElementById('reading-books').textContent = stats.reading_books || 0;
            document.getElementById('finished-books').textContent = stats.finished_books || 0;
            document.getElementById('total-pages').textContent = stats.total_pages || 0;
            document.getElementById('reading-time').textContent = stats.time_stats?.total_time || 0;
            document.getElementById('average-rating').textContent = (stats.average_rating || 0).toFixed(1);
        }
        
        // Êõ¥Êñ∞ÁõÆÊ†áÊòæÁ§∫
        function updateGoalsDisplay(goals) {
            const container = document.getElementById('goals-list');
            if (!goals || goals.length === 0) {
                container.innerHTML = '<div style="text-align: center; color: var(--text-muted); padding: 20px;">ÊöÇÊó†ÈòÖËØªÁõÆÊ†á</div>';
                return;
            }
            
            container.innerHTML = goals.map(goal => `
                <div class="goal-item">
                    <div class="goal-info">
                        <div class="goal-title">${goal.year}Âπ¥${goal.month ? goal.month + 'Êúà' : ''}${getTargetTypeText(goal.target_type)}ÁõÆÊ†á</div>
                        <div class="goal-progress">ËøõÂ∫¶: ${goal.current_value}/${goal.target_value} ${getTargetUnit(goal.target_type)}</div>
                    </div>
                    <div class="goal-status ${goal.status === 'completed' ? 'status-completed' : 'status-active'}">
                        ${goal.status === 'completed' ? 'Â∑≤ÂÆåÊàê' : 'ËøõË°å‰∏≠'}
                    </div>
                </div>
            `).join('');
        }
        
        // Êõ¥Êñ∞ËÆ°ÂàíÊòæÁ§∫
        function updatePlansDisplay(plans) {
            const container = document.getElementById('plans-list');
            if (!plans || plans.length === 0) {
                container.innerHTML = '<div style="text-align: center; color: var(--text-muted); padding: 20px;">ÊöÇÊó†ÈòÖËØªËÆ°Âàí</div>';
                return;
            }
            
            container.innerHTML = plans.map(plan => `
                <div class="plan-item">
                    <div class="plan-title">${plan.title}</div>
                    <div class="plan-description">${plan.description}</div>
                    <div class="plan-progress">
                        <div class="plan-progress-bar">
                            <div class="plan-progress-fill" style="width: ${plan.progress}%"></div>
                        </div>
                        <span>${plan.progress.toFixed(1)}%</span>
                    </div>
                </div>
            `).join('');
        }
        
        // Êõ¥Êñ∞Êé®ËçêÊòæÁ§∫
        function updateRecommendationsDisplay(recommendations) {
            const container = document.getElementById('recommendations-list');
            if (!recommendations || recommendations.length === 0) {
                container.innerHTML = '<div style="text-align: center; color: var(--text-muted); padding: 20px;">ÊöÇÊó†Êé®Ëçê‰π¶Á±ç</div>';
                return;
            }
            
            container.innerHTML = recommendations.map(rec => `
                <div class="recommendation-item">
                    <div class="recommendation-cover">üìö</div>
                    <div class="recommendation-info">
                        <div class="recommendation-title">${rec.title}</div>
                        <div class="recommendation-author">${rec.author}</div>
                        <div class="recommendation-reason">${rec.reason}</div>
                    </div>
                    <div class="recommendation-score">${rec.score.toFixed(1)}ÂàÜ</div>
                </div>
            `).join('');
        }
        
        // ÂàùÂßãÂåñÂõæË°®
        function initChart() {
            const ctx = document.getElementById('reading-chart').getContext('2d');
            readingChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['1Êúà', '2Êúà', '3Êúà', '4Êúà', '5Êúà', '6Êúà'],
                    datasets: [{
                        label: 'Â∑≤ËØª‰π¶Á±ç',
                        data: [2, 3, 1, 4, 2, 5],
                        borderColor: '#e76f51',
                        backgroundColor: 'rgba(231, 111, 81, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: {
                                color: '#f1faee'
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                color: '#a8dadc'
                            },
                            grid: {
                                color: '#457b9d'
                            }
                        },
                        y: {
                            ticks: {
                                color: '#a8dadc'
                            },
                            grid: {
                                color: '#457b9d'
                            }
                        }
                    }
                }
            });
        }
        
        // Ê®°ÊÄÅÊ°ÜÊìç‰Ωú
        function showAddGoalModal() {
            document.getElementById('add-goal-modal').classList.remove('hide');
        }
        
        function hideAddGoalModal() {
            document.getElementById('add-goal-modal').classList.add('hide');
            document.getElementById('add-goal-form').reset();
        }
        
        function showAddPlanModal() {
            document.getElementById('add-plan-modal').classList.remove('hide');
        }
        
        function hideAddPlanModal() {
            document.getElementById('add-plan-modal').classList.add('hide');
            document.getElementById('add-plan-form').reset();
        }
        
        // Ë°®ÂçïÊèê‰∫§
        document.getElementById('add-goal-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const goalData = {
                year: parseInt(document.getElementById('goal-year').value),
                month: parseInt(document.getElementById('goal-month').value) || 0,
                target_type: document.getElementById('goal-type').value,
                target_value: parseInt(document.getElementById('goal-value').value)
            };
            
            try {
                const response = await fetch('/api/reading-goals', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(goalData)
                });
                
                if (response.ok) {
                    hideAddGoalModal();
                    loadDashboardData();
                    showToast('ÁõÆÊ†áÊ∑ªÂä†ÊàêÂäüÔºÅ', 'success');
                } else {
                    throw new Error('Ê∑ªÂä†ÁõÆÊ†áÂ§±Ë¥•');
                }
            } catch (error) {
                showToast('Ê∑ªÂä†ÁõÆÊ†áÂ§±Ë¥•: ' + error.message, 'error');
            }
        });
        
        document.getElementById('add-plan-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const planData = {
                title: document.getElementById('plan-title').value,
                description: document.getElementById('plan-description').value,
                start_date: document.getElementById('plan-start-date').value,
                end_date: document.getElementById('plan-end-date').value,
                target_books: []
            };
            
            try {
                const response = await fetch('/api/reading-plans', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(planData)
                });
                
                if (response.ok) {
                    hideAddPlanModal();
                    loadDashboardData();
                    showToast('ËÆ°ÂàíÊ∑ªÂä†ÊàêÂäüÔºÅ', 'success');
                } else {
                    throw new Error('Ê∑ªÂä†ËÆ°ÂàíÂ§±Ë¥•');
                }
            } catch (error) {
                showToast('Ê∑ªÂä†ËÆ°ÂàíÂ§±Ë¥•: ' + error.message, 'error');
            }
        });
        
        // Â∑•ÂÖ∑ÂáΩÊï∞
        function getTargetTypeText(type) {
            const types = {
                'books': '‰π¶Á±ç',
                'pages': 'È°µÊï∞',
                'time': 'Êó∂Èó¥'
            };
            return types[type] || type;
        }
        
        function getTargetUnit(type) {
            const units = {
                'books': 'Êú¨',
                'pages': 'È°µ',
                'time': 'ÂàÜÈíü'
            };
            return units[type] || '';
        }
        
        function refreshStats() {
            loadDashboardData();
            showToast('ÁªüËÆ°Êï∞ÊçÆÂ∑≤Âà∑Êñ∞', 'info');
        }
        
        function refreshRecommendations() {
            // Âà∑Êñ∞Êé®Ëçê
            showToast('Êé®ËçêÊï∞ÊçÆÂ∑≤Âà∑Êñ∞', 'info');
        }
        
        function switchChartType() {
            chartType = chartType === 'monthly' ? 'weekly' : 'monthly';
            // Êõ¥Êñ∞ÂõæË°®Êï∞ÊçÆ
            showToast('ÂõæË°®Á±ªÂûãÂ∑≤ÂàáÊç¢', 'info');
        }
        
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: var(--card-bg);
                color: var(--text-color);
                padding: 15px 20px;
                border-radius: 8px;
                border-left: 4px solid var(--primary-color);
                box-shadow: 0 4px 12px var(--shadow-color);
                z-index: 10000;
                animation: slideIn 0.3s ease;
            `;
            
            if (type === 'success') {
                toast.style.borderLeftColor = '#27ae60';
            } else if (type === 'error') {
                toast.style.borderLeftColor = '#e74c3c';
            }
            
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }
    </script>
</body>
</html> 